{"openapi":"3.1.0","info":{"title":"SVM Inference API","description":"An API for running inference on an SVM model. Supports inputs as a Pandas DataFrame encoded in JSON (multiple orients) or a legacy 2D list of numbers.","version":"1.0.0"},"paths":{"/infer":{"post":{"tags":["inference"],"summary":"Run SVM inference","description":"Accepts features as a Pandas DataFrame encoded in JSON (with selectable `orient`) or as a legacy 2D numeric array.\n\n### How the DataFrame JSON is interpreted\nConvert a JSON object + orient into a pandas DataFrame.\n\n**Supported orients:**\n- **'records'**: `List[Dict[str, Any]]` (e.g., `[{\"f1\":1, \"f2\":2}, ...]`)\n- **'split'**: `{ \"columns\": [...], \"index\": [...], \"data\": [[...],[...],...] }`\n- **'columns'**: `{ col_name: [values], ... }`\n- **'index'**: `{ index_key: { col: value, ... }, ... }`","operationId":"infer_infer_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InferenceRequest","description":"Provide **either** a `dataframe` (with `orient`) **or** a legacy `data` 2D array. If `model_file`/`scaler_file` are omitted, defaults are used."}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InferenceResponse"}}}},"422":{"description":"Invalid input payload.","content":{"application/json":{"example":{"detail":"You must provide either 'dataframe' (with 'orient') or 'data'."}}}},"404":{"description":"Model or scaler file not found.","content":{"application/json":{"example":{"detail":"Model file not found: model.joblib"}}}},"500":{"description":"Unhandled server error.","content":{"application/json":{"example":{"detail":"Non-numeric values detected after conversion."}}}}}}}},"components":{"schemas":{"InferenceRequest":{"properties":{"dataframe":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Dataframe","description":"JSON object representing a Pandas DataFrame (structure depends on `orient`).\n\n**Convert a JSON object + orient into a pandas DataFrame. Supported orients:**\n- **'records'**: `List[Dict[str, Any]]` (e.g., `[{\"f1\": 1, \"f2\": 2}, ...]`)\n- **'split'**: `{ \"columns\": [...], \"index\": [...], \"data\": [[...],[...],...] }`\n- **'columns'**: `{ col_name: [values], ... }`\n- **'index'**: `{ index_key: { col: value, ... }, ... }`\n","example":[{"f1":1.2,"f2":3.4,"f3":5.6},{"f1":0.1,"f2":0.2,"f3":0.3}]},"orient":{"anyOf":[{"type":"string","enum":["records","split","columns","index"]},{"type":"null"}],"title":"Orient","description":"Pandas JSON orientation for `dataframe`.","default":"records","examples":["records","split","columns","index"]},"data":{"anyOf":[{"items":{"items":{"type":"number"},"type":"array"},"type":"array"},{"type":"null"}],"title":"Data","description":"Legacy matrix-like data as a 2D array of floats. Use this **or** `dataframe`.","example":[[1.2,3.4,5.6],[0.1,0.2,0.3]]},"model_file":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Model File","description":"Path to the `.joblib` model. Defaults to `svm_model.joblib` if omitted.","example":"artifacts/svm_model.joblib"},"scaler_file":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Scaler File","description":"Path to the `.joblib` scaler. Defaults to `scaler.joblib` if omitted.","example":"artifacts/scaler.joblib"}},"type":"object","title":"InferenceRequest","description":"Input payload for /infer.\n\nYou may provide either:\n- **dataframe** + **orient**: A Pandas DataFrame in JSON form\n- **data**: A legacy 2D array (list of lists) of numeric features","examples":[{"summary":"DataFrame as records (default orient)","value":{"dataframe":[{"f1":1.2,"f2":3.4,"f3":5.6},{"f1":0.1,"f2":0.2,"f3":0.3}],"orient":"records"}},{"summary":"DataFrame with split orient","value":{"dataframe":{"columns":["f1","f2","f3"],"data":[[1.2,3.4,5.6],[0.1,0.2,0.3]]},"orient":"split"}},{"summary":"Legacy 2D array","value":{"data":[[1.2,3.4,5.6],[0.1,0.2,0.3]]}}]},"InferenceResponse":{"properties":{"success":{"type":"boolean","title":"Success","description":"Whether the inference call succeeded."},"logs":{"items":{"type":"string"},"type":"array","title":"Logs","description":"Processing log messages."},"num_samples":{"type":"integer","title":"Num Samples","description":"Number of samples inferred."},"num_features":{"type":"integer","title":"Num Features","description":"Number of features per sample."},"predictions":{"items":{"type":"string"},"type":"array","title":"Predictions","description":"Human-readable mapped predictions."},"raw_predictions":{"items":{},"type":"array","title":"Raw Predictions","description":"Raw model outputs."},"prediction_margin_to_hyperplane":{"title":"Prediction Margin To Hyperplane","description":"Distance of datapoint to decision hyperplane"},"used_model_file":{"type":"string","title":"Used Model File","description":"Path of the model actually used."},"used_scaler_file":{"type":"string","title":"Used Scaler File","description":"Path of the scaler actually used."},"columns_used":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Columns Used","description":"Column order used for inference when a DataFrame was provided."}},"type":"object","required":["success","logs","num_samples","num_features","predictions","raw_predictions","prediction_margin_to_hyperplane","used_model_file","used_scaler_file"],"title":"InferenceResponse"}}}}